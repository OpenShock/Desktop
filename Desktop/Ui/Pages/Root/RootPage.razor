@using OpenShock.Desktop.Services
@layout RootLayout
@inject StartupService StartupService
@inject NavigationManager NavigationManager
@inject ILogger<RootPage> Logger
@implements IAsyncDisposable

@page "/"

<MudContainer Class="align-content-center" MaxWidth="MaxWidth.Small" Style="padding-top: 30px">
    <MudPaper Class="rounded-lg" Elevation="0" Style="padding: 20px; text-align: center;" Outlined="true">

        <MudText>Starting OpenShock Desktop...</MudText>
        <br/>
        <MudProgressCircular Color="Color.Primary" Style="height:125px;width:125px;" Indeterminate="@(!StartupService.IsStarted.Value)" Value="100" Max="100"/>

        <br/>
        <MudText>@StartupService.Status.StepName</MudText>
        
        <br/>
        @if (@StartupService.Status.ProgressTotal != null)
        {
            <MudProgressLinear Value="@StartupService.Status.ProgressCurrent" Max="@StartupService.Status.ProgressTotal.Value"></MudProgressLinear>
        }
        else
        {
            <MudProgressLinear Value="100" Max="100"></MudProgressLinear>
        }
    </MudPaper>
</MudContainer>

@code {
    
    protected override async Task OnInitializedAsync()
    {
        _startupSubscription = await StartupService.IsStarted.ValueUpdated.SubscribeAsync(b =>
        {
            if (b) GoToDash();
            
            return Task.CompletedTask;
        });
        
        _startupUpdatedSubscription = await StartupService.Status.Updated.SubscribeAsync(b => InvokeAsync(StateHasChanged));

        if (StartupService.IsStarted.Value)
        {
            GoToDash();
        }
    }
    
    private void GoToDash()
    {
        Logger.LogDebug("Navigating to dash");
        NavigationManager.NavigateTo("dash/dashboard");
    }

    private bool _disposed;
    private IAsyncDisposable _startupSubscription = null!;
    private IAsyncDisposable _startupUpdatedSubscription = null!;

    public async ValueTask DisposeAsync()
    {
        if (_disposed) return;
        _disposed = true;
        
        await _startupSubscription.DisposeAsync();
        await _startupUpdatedSubscription.DisposeAsync();
    }

}