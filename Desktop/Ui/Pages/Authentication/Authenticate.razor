@inject ConfigManager ConfigManager
@inject AuthService AuthService
@inject PipeServerService PipeService
@layout NotAuthedLayout
@using OpenShock.Desktop.Config
@using OpenShock.Desktop.Services
@using OpenShock.Desktop.Services.Pipes
@inherits LayoutComponentBase
@implements IAsyncDisposable

<MudDialog>
    <DialogContent>
        <MudContainer Class="align-content-center" MaxWidth="MaxWidth.Small" Style="padding-top: 30px">
            <MudPaper Class="rounded-lg" Elevation="0" Style="padding: 20px; text-align: center;" Outlined="true">

                <MudContainer Class="d-flex" Style="padding: 0">
                    <MudImage Src="images/Icon.svg" Alt="Logo" Width="75" Height="75" Class="ma-4" Style="vertical-align: bottom;"/>
                    <MudText Class="d-inline-block flex-grow-1 pa-0" Style="font-size: 5em;">OpenShock</MudText>
                </MudContainer>

                <div style="margin-top: 20px;">
                    <LoginPart ProceedAuthenticated="ProceedAuthenticated"/>
                </div>
            </MudPaper>
        </MudContainer>
    </DialogContent>
    <DialogActions>

    </DialogActions>
</MudDialog>

@code {
    
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = null!;

    
    private IAsyncDisposable _pipeMessageSubscription = null!;

    protected override async Task OnInitializedAsync()
    {
        _pipeMessageSubscription = await PipeService.OnTokenReceived.SubscribeAsync(TokenReceived);

    }

    private async Task TokenReceived(string token)
    {
        ConfigManager.Config.OpenShock.Token = token;
        await ConfigManager.SaveNow();
        
        await ProceedAuthenticated();
    }

    private async Task ProceedAuthenticated()
    {
        await InvokeAsync(MudDialog.Close).ConfigureAwait(false);
        await AuthService.Authenticate();
    }
    
    private bool _disposed;

    public async ValueTask DisposeAsync()
    {
        if (_disposed) return;
        _disposed = true;
        await _pipeMessageSubscription.DisposeAsync();
    }

}