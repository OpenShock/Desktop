@inject ConfigManager ConfigManager
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject AuthService AuthService
@inject PipeServerService PipeService
@layout NotAuthedLayout
@using OpenShock.Desktop.Config
@using OpenShock.Desktop.Services
@using OpenShock.Desktop.Services.Pipes
@inherits LayoutComponentBase
@implements IAsyncDisposable
@inject ILogger<Authenticate> Logger


<MudDialog>
    <DialogContent>
        <MudContainer Class="align-content-center" MaxWidth="MaxWidth.Small" Style="padding-top: 30px">
            <MudPaper Class="rounded-lg" Elevation="0" Style="padding: 20px; text-align: center;" Outlined="true">

                <MudContainer Class="d-flex" Style="padding: 0">
                    <MudImage Src="images/Icon.svg" Alt="Logo" Width="75" Height="75" Class="ma-4" Style="vertical-align: bottom;"/>
                    <MudText Class="d-inline-block flex-grow-1 pa-0" Style="font-size: 5em;">OpenShock</MudText>
                </MudContainer>

                <div style="margin-top: 20px;">

                    @switch (_currentState)
                    {
                        case State.Login:
                            <LoginPart ProceedAuthenticated="ProceedAuthenticated"/>
                            break;
                        case State.Loading:
                            <MudProgressCircular Color="Color.Primary" Style="height:125px;width:125px;" Indeterminate="true"/>
                            break;
                        case State.Failed:
                            <MudText Typo="Typo.h6">Failed to authenticate</MudText>
                            <MudButton OnClick="ReLogin" Variant="Variant.Filled" Color="Color.Primary">Re-login</MudButton>
                            break;
                        case State.Authenticated:
                            <MudText Typo="Typo.h6">Successful, redirecting...</MudText>
                            break;
                    }
                </div>
            </MudPaper>
        </MudContainer>
    </DialogContent>
    <DialogActions>

    </DialogActions>
</MudDialog>

@code {
    
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = null!;

    private enum State
    {
        Login,
        Loading,
        Authenticated,
        Failed
    }

    private State _currentState = State.Login;
    private IAsyncDisposable _pipeMessageSubscription = null!;

    protected override async Task OnInitializedAsync()
    {
        if (await CheckTokenReceived()) return;

        _pipeMessageSubscription = await PipeService.OnMessageReceived.SubscribeAsync(CheckTokenReceived);

    }

    private async Task<bool> CheckTokenReceived()
    {
        if (string.IsNullOrEmpty(PipeService.Token) || _currentState != State.Login) return false;
        ConfigManager.Config.OpenShock.Token = PipeService.Token;
        ConfigManager.Save();
        PipeService.Token = null;
        await ProceedAuthenticated();
        return true;
    }

    public void ReLogin()
    {
        _currentState = State.Login;
    }

    private async Task ProceedAuthenticated()
    {
        _currentState = State.Loading;
        await InvokeAsync(StateHasChanged);

        try
        {
            await AuthService.Authenticate();

            _currentState = State.Authenticated;
            await InvokeAsync(StateHasChanged);
            
            MudDialog.Close();
        }
        catch (Exception e)
        {
            _currentState = State.Failed;
            await InvokeAsync(StateHasChanged);
            Logger.LogError(e, "Failed to authenticate");
            Snackbar.Add("Failed to authenticate", Severity.Error);
        }
    }
    
    private bool _disposed;

    public async ValueTask DisposeAsync()
    {
        if (_disposed) return;
        _disposed = true;
        await _pipeMessageSubscription.DisposeAsync();
    }

}