@using System.Diagnostics
@using Microsoft.Maui.Controls.PlatformConfiguration.WindowsSpecific
@using OpenShock.Desktop.Config
@using OpenShock.Desktop.ModuleManager
@using OpenShock.Desktop.ModuleManager.Repository
@using OpenShock.Desktop.Utils
@using Application = Microsoft.Maui.Controls.Application
@using Semver

@inject ModuleManager ModuleManager
@inject ConfigManager ConfigManager

<MudPaper Class="d-flex module-manager-item-root rounded-lg gap-10" Outlined="true">
    <img src="@ModuleIcon" alt="@ModuleName" class="icon rounded-lg"/>
    
    <div class="d-flex flex-column justify-space-evenly overflow-hidden">
        <MudText Typo="Typo.h4">@ModuleName</MudText>
        <MudText Typo="Typo.body1">@(RepoModule?.Description ?? "Description unavailable")</MudText>
    </div>

    <div class="ml-auto flex-shrink-0">
        @if (ConfigManager.Config.Modules.ModuleTasks.ContainsKey(ModuleId)) // Pending restart for this module
        {
            <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.RestartAlt" OnClick="Restart">Pending Restart</MudButton>
        }
        else if (LoadedModule != null)
        {
            <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.RemoveFromQueue" OnClick="Remove">Remove</MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.InstallDesktop" OnClick="InstallLatest">Install @LatestVersion</MudButton>
        }
    </div>
</MudPaper>

@code {
    
    /// <summary>
    /// The module information provided by a repository
    /// If null, the module is not known in any registry
    /// </summary>
    [Parameter]
    public Module? RepoModule { get; init; }
    
    /// <summary>
    /// The loaded module
    /// If null the module is not loaded
    /// </summary>
    [Parameter]
    public LoadedModule? LoadedModule { get; init; }
    
    [Parameter]
    public required string ModuleId { get; init; }

    private string ModuleName => RepoModule?.Name ?? (LoadedModule?.Module.Name ?? "error");
    private string? ModuleIcon => RepoModule?.IconUrl?.ToString() ?? LoadedModule!.Module.IconPath;
    
    private SemVersion? LatestVersion => RepoModule?.Versions.Keys.OrderByDescending(x => x, SemVersion.PrecedenceComparer).FirstOrDefault();

    protected override void OnInitialized()
    {
        if(RepoModule == null && LoadedModule == null)
        {
            throw new ArgumentException("RepoModule and LoadedModule cannot both be null");
        }
    }
    
    private void InstallLatest()
    {
        if (LatestVersion == null)
        {
            return;
        }
        
        Install(LatestVersion);
    }

    private void Install(SemVersion version)
    {
        ConfigManager.Config.Modules.ModuleTasks[ModuleId] = new InstallModuleTask
        {
            Version = version
        };
        
        ConfigManager.Save();
        InvokeAsync(StateHasChanged);
    }

    private void Remove()
    {
        ConfigManager.Config.Modules.ModuleTasks[ModuleId] = new RemoveModuleTask();
        ConfigManager.Save();
        InvokeAsync(StateHasChanged);
    }

    private async Task Restart()
    {
        await ConfigManager.SaveNow();
#if WINDOWS
        WindowsRestartHelper.RestartApp();
#endif
    }
}