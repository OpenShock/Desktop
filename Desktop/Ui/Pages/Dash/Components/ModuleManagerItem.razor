@using System.Collections.Immutable
@using OpenShock.Desktop.Config
@using OpenShock.Desktop.ModuleBase
@using OpenShock.Desktop.ModuleManager
@using OpenShock.Desktop.ModuleManager.Repository
@using OpenShock.Desktop.Utils
@using Semver

@inject ConfigManager ConfigManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudPaper Class="d-flex module-manager-item-root rounded-lg gap-10" Outlined="true">
    @switch (_moduleIcon?.Index)
    {
        case 0:
            <img src="@_moduleIcon.AsT0" alt="Module Icon" class="icon rounded-lg"/>
            break;
        case 1:
            <MudIcon Icon="@_moduleIcon.AsT1"/>
            break;
    }

    <div class="d-flex flex-column justify-space-evenly overflow-hidden">
        <MudText Typo="Typo.h4">@_moduleName</MudText>
        <MudText Typo="Typo.body1">@(RepoModule?.Description ?? "Description unavailable")</MudText>
    </div>

    <div class="ml-auto flex-shrink-0 d-flex flex-column gap-2">


        <MudButtonGroup Variant="Variant.Outlined" Color="@CurrentButtonColor">
            @switch (CurrentInstallState)
            {
                case InstallState.RestartRequired:
                    <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.RestartAlt"
                               OnClick="Restart">
                        Pending Restart
                    </MudButton>
                    break;

                case InstallState.UpdateAvailable:
                    <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Update"
                               OnClick="() => InstallSpecificVersion(LoadedModule!.AvailableVersion!)">
                        Update to @LoadedModule!.AvailableVersion
                    </MudButton>
                    break;
                case InstallState.Installed:
                    <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.DesktopWindows"
                               Disabled="true">
                        Up to date
                    </MudButton>
                    break;
                case InstallState.Installable:
                    <MudButton StartIcon="@Icons.Material.Filled.InstallDesktop"
                               OnClick="InstallLatest">Install @LatestVersion</MudButton>
                    break;
                case InstallState.PreReleaseInstallable:
                    <MudButton StartIcon="@Icons.Material.Filled.InstallDesktop" Color="Color.Warning"
                               OnClick="() => InstallSpecificVersion(LatestPreReleaseVersion!)">Install preview @LatestPreReleaseVersion</MudButton>
                    break;
                case InstallState.NoVersionAvailable:
                    <MudButton StartIcon="@Icons.Material.Filled.CodeOff" Disabled="true">No version available
                    </MudButton>
                    break;
            }
            <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown" Style="align-self: auto" Class="slim-split-button">
                @if (_availableVersions != null && _availableVersions.Value.Length > 0)
                {
                    <MudMenu Label="Versions" StartIcon="@Icons.Material.Filled.FormatListNumbered" MaxHeight="400"
                             Dense="true">
                        @foreach (var version in _availableVersions)
                        {
                            <MudMenuItem OnClick="() => InstallSpecificVersion(version)">@version</MudMenuItem>
                        }
                    </MudMenu>
                }
                <MudDivider/>
                @if (CurrentInstallState is InstallState.Installed or InstallState.UpdateAvailable or InstallState.RestartRequired)
                {
                    <MudMenuItem Icon="@Icons.Material.Filled.RemoveFromQueue" OnClick="Remove">Remove</MudMenuItem>
                }
            </MudMenu>
        </MudButtonGroup>

        <div style="text-align: right">
            @if (LoadedModule != null)
            {
                <MudTooltip>
                    <ChildContent>
                        <MudText Typo="Typo.body2">Installed:
                            <MudChip Size="Size.Small"
                                     T="string">@LoadedModule.Version.WithoutMetadata().ToString()</MudChip>
                        </MudText>
                    </ChildContent>
                    <TooltipContent>
                        <MudText Typo="Typo.body2">@LoadedModule.Version.ToString()</MudText>
                    </TooltipContent>
                </MudTooltip>
            }
        </div>
    </div>
</MudPaper>

@code {

    /// <summary>
    /// The module information provided by a repository
    /// If null, the module is not known in any registry
    /// </summary>
    [Parameter]
    public Module? RepoModule { get; init; }

    /// <summary>
    /// The loaded module
    /// If null the module is not loaded
    /// </summary>
    [Parameter]
    public LoadedModule? LoadedModule { get; init; }

    [Parameter] public required string ModuleId { get; init; }

    private string _moduleName = null!;
    private IconOneOf? _moduleIcon;

    private SemVersion? LatestVersion => RepoModule?.Versions.Keys.Where(x => x.IsRelease).OrderByDescending(x => x, SemVersion.PrecedenceComparer).FirstOrDefault();
    private SemVersion? LatestPreReleaseVersion => RepoModule?.Versions.Keys.Where(x => !x.IsRelease).OrderByDescending(x => x, SemVersion.PrecedenceComparer).FirstOrDefault();

    private ImmutableArray<SemVersion>? _availableVersions = null;

    protected override void OnInitialized()
    {
        if (RepoModule == null && LoadedModule == null)
        {
            throw new ArgumentException("RepoModule and LoadedModule cannot both be null");
        }

        _moduleName = RepoModule?.Name ?? (LoadedModule?.Name ?? "error");
        if (RepoModule?.IconUrl is not null)
        {
            _moduleIcon = IconOneOf.FromPath(RepoModule.IconUrl.ToString());
        }
        {
            _moduleIcon = LoadedModule?.Module.Icon;
        }
        _availableVersions = GetAvailableVersions();
    }

    private void InstallLatest()
    {
        if (LatestVersion == null)
        {
            return;
        }

        Install(LatestVersion);
    }

    private void InstallSpecificVersion(SemVersion version)
    {
        var parameters = new DialogParameters<InstallConfirmDialog>
        {
            { x => x.ModuleName, _moduleName },
            { x => x.ModuleVersion, version },
            {
                x => x.OnConfirm, (Func<Task>)(() =>
                {
                    Install(version);
                    return Task.CompletedTask;
                })
            }
        };
        DialogService.ShowAsync<InstallConfirmDialog>("Install module?", parameters);
    }

    private void Install(SemVersion version)
    {
        ConfigManager.Config.Modules.ModuleTasks[ModuleId] = new InstallModuleTask
        {
            Version = version
        };

        ConfigManager.Save();
        InvokeAsync(StateHasChanged);
    }

    private void Remove()
    {
        ConfigManager.Config.Modules.ModuleTasks[ModuleId] = new RemoveModuleTask();
        ConfigManager.Save();
        Snackbar.Add("Module will be removed upon restart", Severity.Info);
        InvokeAsync(StateHasChanged);
    }

    private async Task Restart()
    {
        await ConfigManager.SaveNow();
#if WINDOWS
        WindowsRestartHelper.RestartApp();
#endif
    }

    private ImmutableArray<SemVersion>? GetAvailableVersions()
    {
        return RepoModule?.Versions.Keys.OrderByDescending(x => x, SemVersion.PrecedenceComparer).ToImmutableArray();
    }

    private Color CurrentButtonColor =>
        CurrentInstallState switch
        {
            InstallState.RestartRequired => Color.Info,
            InstallState.UpdateAvailable => Color.Tertiary,
            InstallState.Installable => Color.Success,
            InstallState.PreReleaseInstallable => Color.Warning,
            InstallState.NoVersionAvailable => Color.Default,
            _ => Color.Default
        };

    private InstallState CurrentInstallState
    {
        get
        {
            if (ConfigManager.Config.Modules.ModuleTasks.ContainsKey(ModuleId))
                return InstallState.RestartRequired; // Restart pending due to queued module task

            if (LoadedModule?.AvailableVersion != null)
                return InstallState.UpdateAvailable; // Installed and update available

            if (LoadedModule != null)
                return InstallState.Installed; // Installed, no update available

            if (LatestVersion != null)
                return InstallState.Installable; // Not installed, but installable

            if (LatestPreReleaseVersion != null)
                return InstallState.PreReleaseInstallable; // Not installed, no full release, but a prerelease is installable

            return InstallState.NoVersionAvailable;
        }
    }

    private enum InstallState
    {
        RestartRequired,
        UpdateAvailable,
        Installed,
        Installable,
        PreReleaseInstallable,
        NoVersionAvailable
    }


}