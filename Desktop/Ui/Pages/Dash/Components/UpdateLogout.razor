@inject IDialogService DialogService
@inject ConfigManager ConfigManager
@inject Updater Updater
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@using OpenShock.Desktop.Config
@using OpenShock.Desktop.ReactiveExtensions
@using OpenShock.Desktop.Services
@using OpenShock.Desktop.Ui.Pages.Authentication
@implements IAsyncDisposable

@code {
    private static readonly DialogOptions UpdateDialogOptions = new() { NoHeader = true, BackdropClick = false };
    private static readonly DialogOptions LoginDialogOptions = new() { FullScreen = true, CloseButton = true};

    private async Task OpenUpdateDialog()
    {
        await DialogService.ShowAsync<UpdateDialog>("Update", UpdateDialogOptions);
    }

    private List<IAsyncDisposable> _disposables = new();
    
    protected override async Task OnInitializedAsync()
    {
        _disposables.Add(await Updater.UpdateAvailable.ValueUpdated.SubscribeConcurrentAsync(UpdateAvailableOnValueChanged));
        _disposables.Add(await Updater.CheckingForUpdate.ValueUpdated.SubscribeConcurrentAsync(CheckingForUpdateOnValueChanged));
        
        if (Updater.UpdateAvailable.Value && !Updater.IsPostponed) await OpenUpdateDialog();
    }

    private async ValueTask UpdateAvailableOnValueChanged(bool v)
    {
        await InvokeAsync(StateHasChanged);
        if (v && !Updater.IsPostponed) await OpenUpdateDialog();
    }

    private void CheckingForUpdateOnValueChanged(bool v)
    {
        InvokeAsync(StateHasChanged);
    }

    private async Task Logout()
    {
        await AuthService.Logout();

        NavigationManager.NavigateTo("/");
    }
    
    private bool _disposed = false;

    public async ValueTask DisposeAsync()
    {
        if (_disposed) return;
        _disposed = true;
        
        foreach (var asyncDisposable in _disposables)
        {
            await asyncDisposable.DisposeAsync();
        }
        
        _disposables.Clear();
    }

    private async Task OpenLoginDialog()
    {
        await DialogService.ShowAsync<Authenticate>("Login", LoginDialogOptions);
    }

}

<div class="d-flex">
    <MudMenu>
        <ActivatorContent>
        @if (AuthService.AuthState.Value == AuthService.AuthStateType.Authed)
        {
            <MudAvatar>
                <MudImage Src="@AuthService.SelfResponse?.Image.ToString()"/>
            </MudAvatar>
            <div class="d-flex align-center" style="margin-left: 15px">
                <p>@AuthService.SelfResponse?.Name</p>
            </div>
        }
        else
        {
            <MudAvatar Style="background-color: transparent">
                <MudImage Src="/images/Icon.svg"/>
            </MudAvatar>
            <div class="d-flex align-center" style="margin-left: 15px">
                <p>Not Logged In</p>
            </div>
        }
        </ActivatorContent>
        <ChildContent>
            <MudMenuItem Icon="@Icons.Material.Filled.List" Href="/dash/logs">Logs</MudMenuItem>
            <MudMenuItem Icon="@Icons.Material.Filled.ElectricBolt" Href="/dash/shockers">Shockers</MudMenuItem>
            <MudMenuItem Icon="@Icons.Material.Filled.Settings" Href="/dash/settings">Settings</MudMenuItem>
            @if (AuthService.AuthState.Value == AuthService.AuthStateType.Authed)
            {
                <MudMenuItem Icon="@Icons.Material.Filled.Logout" OnClick="Logout">Logout</MudMenuItem>
            }
            else
            {
                <MudMenuItem Icon="@Icons.Material.Filled.Login" OnClick="OpenLoginDialog">Login</MudMenuItem>
            }
        </ChildContent>
    </MudMenu>

</div>

<div class="d-flex flex-childs-full-width gap-5">


</div>

<style>
    .flex-childs-full-width >* {
        width:  100%;
    }
</style>