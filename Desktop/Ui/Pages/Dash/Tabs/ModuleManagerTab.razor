@page "/dash/modules"
@using System.Collections.Immutable
@using System.Diagnostics
@using OpenShock.Desktop.ModuleManager
@using OpenShock.Desktop.ModuleManager.Repository
@using OpenShock.Desktop.Ui.Pages.Dash.Components
@inject RepositoryManager RepositoryManager
@inject ModuleManager ModuleManager

<MudButton OnClick="OpenAppdataFolder"
           Variant="Variant.Filled"
           StartIcon="@Icons.Material.Filled.FolderOpen"
           Color="Color.Primary"
           Class="mb-2">Open AppData
</MudButton>

<MudExpansionPanels MultiExpansion="true">
    <MudExpansionPanel Expanded="true">
        <TitleContent>
            Installed
            <MudChip T="int">@_installedModules.Count</MudChip>
        </TitleContent>
        <ChildContent>
            <div class="d-flex gap-3 flex-wrap">
                @foreach (var module in _installedModules)
                {
                    <ModuleManagerItem ModuleId="@module.Key" RepoModule="@module.Value.RepositoryModule"
                                       LoadedModule="@module.Value"/>
                }
            </div>
        </ChildContent>
    </MudExpansionPanel>
    @if (_unknownModules.Count > 0)
    {
        <MudExpansionPanel>
            <TitleContent>
                Unknown Loaded
                <MudChip T="int">@_unknownModules.Count</MudChip>
            </TitleContent>
            <ChildContent>
                <div class="d-flex gap-3 flex-wrap">
                    @foreach (var module in _unknownModules)
                    {
                        <ModuleManagerItem ModuleId="@module.Key" LoadedModule="module.Value"/>
                    }
                </div>
            </ChildContent>
        </MudExpansionPanel>
    }
    <MudExpansionPanel @bind-Expanded="OpenAvailableModules">
        <TitleContent>
            Available
            <MudChip T="int">@_installableModules.Count</MudChip>
        </TitleContent>
        <ChildContent>
            <div class="d-flex gap-3 flex-wrap">
                @foreach (var module in _installableModules)
                {
                    <ModuleManagerItem ModuleId="@module.Key" RepoModule="@module.Value"/>
                }
            </div>
        </ChildContent>
    </MudExpansionPanel>
</MudExpansionPanels>

@code {

    [Parameter]
    [SupplyParameterFromQuery]
    public bool OpenAvailableModules { get; set; } = false;
    
    private ImmutableDictionary<string, LoadedModule> _unknownModules = null!;
    private ImmutableDictionary<string, Module> _installableModules = null!;
    private ImmutableDictionary<string, LoadedModule> _installedModules = null!;

    protected override void OnInitialized()
    {
        PopulateModuleLists();
    }

    private void PopulateModuleLists()
    {
        var loadedModules = ModuleManager.Modules;

        var modulesFromRepos = RepositoryManager.Repositories
            .Where(x => x.Value.Repository != null)
            .SelectMany(x => x.Value.Repository!.Modules).ToDictionary();

        _unknownModules = loadedModules.Where(x => modulesFromRepos.All(y => y.Key != x.Key)).ToImmutableDictionary();
        _installableModules = modulesFromRepos.Where(x => !loadedModules.Keys.Contains(x.Key)).ToImmutableDictionary();

        _installedModules = loadedModules.Where(x => x.Value.RepositoryModule != null).ToImmutableDictionary();
    }

    private void OpenAppdataFolder()
    {
        Process.Start(new ProcessStartInfo
        {
            FileName = Constants.AppdataFolder,
            UseShellExecute = true,
            Verb = "open"
        });
    }

}