@inject ConfigManager ConfigManager
@inject Updater Updater
@using OpenShock.Desktop.Config
@using OpenShock.Desktop.Services
@using OpenShock.Desktop.Ui.Pages.Dash.Components
@inject IDialogService DialogService
@implements IDisposable

@page "/dash/settings"

<MudPaper Outlined="true" Class="rounded-lg mud-paper-padding">
    <MudText>Desktop App</MudText>
    <MudDivider/>

    <div class="d-flex gap-5" style="align-items: center">

        <MudCheckBox Class="option-width option-checkbox-height" @bind-Value="ConfigManager.Config.App.CloseToTray" Label="Close to Tray" @bind-Value:after="OnSettingsValueChange"/>
        <MudCheckBox Class="option-width option-checkbox-height" @bind-Value="ConfigManager.Config.App.DiscordPreview" Label="Discord Preview" @bind-Value:after="OnSettingsValueChange"/>

        <div style="width: 200px">
            <MudSelect Disabled="Updater.CheckingForUpdate.Value" Variant="Variant.Outlined"
                       @bind-Value="ConfigManager.Config.App.UpdateChannel"
                       Label="Update Channel"
                       @bind-Value:after="UpdateChannelChanged">
                @foreach (UpdateChannel channel in Enum.GetValues(typeof(UpdateChannel)))
                {
                    <MudSelectItem Value="@channel">@channel</MudSelectItem>
                }
            </MudSelect>
        </div>

        <div style="width: 250px">
        @if (Updater.CheckingForUpdate.Value)
        {
            <MudButton Disabled="true" Color="Color.Primary" Variant="Variant.Filled" Class="mud-button-full-width">
                <MudProgressCircular Size="Size.Small" Color="Color.Primary" Indeterminate="true"/>
                <MudText Style="margin-left: 10px">Checking for updates</MudText>
            </MudButton>
        }
        else
        {
            @if (Updater.UpdateAvailable.Value)
            {
                <MudButton Variant="Variant.Filled" Class="mud-button-full-width" Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Update" OnClick="OpenUpdateDialog">Update available</MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Filled" Class="mud-button-full-width" Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Refresh" OnClick="Updater.CheckUpdate">Check for update</MudButton>
            }
        }
        </div>
    </div>
</MudPaper>

@code {

    protected override void OnInitialized()
    {
        Updater.CheckingForUpdate.OnValueChanged += OnCheckingForUpdateChange;
    }

    private void OnCheckingForUpdateChange(bool value)
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnSettingsValueChange()
    {
        ConfigManager.Save();
    }

    private async Task UpdateChannelChanged()
    {
        OnSettingsValueChange();
        await Updater.CheckUpdate();
    }
    
    private readonly DialogOptions _dialogOptions = new() { NoHeader = true, BackdropClick = false };
    
    private void OpenUpdateDialog()
    {
        DialogService.Show<UpdateDialog>("Update", _dialogOptions);
    }

    public void Dispose()
    {
        Updater.CheckingForUpdate.OnValueChanged -= OnCheckingForUpdateChange;
    }

}